-*- Text -*-

The StreamIt Source Tree
========================

$Id: README.source,v 1.1 2002-08-20 21:34:39 dmaze Exp $

Directory Layout
----------------

The top-level directory contains several "project" subdirectories.
Each of these then contains child directories that match the Java
class path (with the exception of compiler/kopi).  These "project"
directories are:

  misc/java (package streamit.misc): Utility classes not specific to
    StreamIt
  scheduler/v2/java (package streamit.scheduler): Synchronous
    data-flow scheduler, used to order work function firings
  library/java (package streamit): Java run-time library, and support
    classes needed to parse old syntax
  compiler/frontend (package streamit.frontend): New-to-old syntax
    converter, and new syntax front-end
  compiler/kopi: The Kopi Java infrastructure, and StreamIt extensions

An older version of the scheduler is in scheduler/v1/java.

The output of the compiler is a C file; this is built and linked
against libstreamit.a, which is built from sources in library/c.
misc/c contains a utility program to convert data files to be used
with the CAG RAW simulator.

Of the remaining directories: apps contains a number of applications,
including examples, tests, and benchmarks; click contains an
implementation of the click router; docs contains documentation for
StreamIt and submitted papers; regtest contains two separate
regression-test engines; and router contains more router stuff.


Compiler Flow
-------------

Compilation with the new syntax begins with the front-end.  Currently
there is only a converter to the old syntax, which is invoked via the
class streamit.frontend.ToJava (under compiler/frontend).

The old-syntax compiler is entirely contained under compiler/kopi.
Directories here correspond to sub-packages of at.dms; for example,
source files for classes in at.dms.kjc are in compiler/kopi/kjc.  The
main entry point to Kopi is in at.dms.kjc.Main, which calls
at.dms.kjc.StreaMITMain.compile() after parsing the old-syntax file.

The Kopi front-end will generate a series of JClassDeclarations.
at.dms.kjc.Kopi2SIR converts these into SIR (Stream IR) structures, in
package at.dms.kjc.sir.  There is one SIR class for each stream type,
so class declarations are converted into the appropriate one of
SIRPipeline, SIRStructure, SIRFilter, etc.

The compiler diverges here between the uniprocessor and RAW
back-ends.  The RAW backend is contained in the at.dms.kjc.raw
package, and the main driver is in the RawBackend class.  The
uniprocessor backend uses the at.dms.kjc.sir.lowering and
at.dms.kjc.lir packages.

The at.dms.kjc.sir.lowering package is used by the uniprocessor
backend to convert SIR to LIR (Low IR).  It also contains a number of
optimization passes, which are run out of
at.dms.kjc.sir.lowering.Flattener.flatten().  The ultimate output of
this function is a single JClassDeclaration representing a C version
of the StreamIt program.  LIR nodes are defined in at.dms.kjc.lir;
they mostly contain specialized nodes that represent specific function
calls in the C output.  SIR nodes may also remain in work functions
when appropriate (e.g. SIRPeekExpression).

Ultimately, the uniprocessor backend uses the visitor class
at.dms.kjc.lir.LIRToC to translate the IR tree to a C file.  This is
compiled against streamit.h and then linked with libstreamit.a, both
from the library/c directory, to produce a binary.
