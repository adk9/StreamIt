import streamit.StreamIt;
import streamit.Filter;
import streamit.Channel;
import streamit.Pipeline;
import streamit.SplitJoin;
// This is the same implementation by Michal, I only modiefied it to the new syntax

complex->complex Filter CombineDFT(int n)
{  

    complex[] results;
    complex[] Ws;

    init
    {
	
	complex wn;
        wn.real = (float) Math.cos(2 * 3.141592654 / ((double) n));
        wn.imag = (float) Math.sin(2 * 3.141592654 / ((double) n));
        results = new complex[n];
	Ws= new complex[n];
	Ws[0].real=1;
	Ws[0].imag=0;
	for (int i=1; i < n; i++)
	    Ws[i]=Ws[i-1]*wn;
	
    }


    work push n peek n pop n 
    {
        int i;
	

	for (i = 0; i < n/2; i ++)
        {
	    complex y0;
	    complex y1;
	    complex y1t;
	    
	    y0=peek(i);
	    y1=peek(n/2+i);
	    
	    y1t=y1*Ws[i];

            results[i] = y0 + y1t;
        
            results[n/2 + i] = y0-y1t;
	    
         }

        for (i = 0; i < n; i++)
        {
            input.popFloat ();
            output.pushFloat(results[i]);
        }
    }
}





complex->complex Filter FFTReorderSimple(int n)
{
    int totalData;
    
    init 
    {
        
    }
    
work peek n push n pop n
    {
        int i;
        
        for (i = 0; i < n; i+=2)
        {
            push(peek(i));
        }
        
        for (i = 1; i < n; i+=2)
        {
            push(peek(i));
        }
        
        for (i=0;i<nWay;i++)
        {
            pop();
        }
    }
}




complex->complex Pipeline  FFTReorder(int nWay) 
{
    while (nWay > 2)
    {
            add (new FFTReorderSimple (nWay));
            nWay = nWay / 2;
    }
    
}




complex->complex Pipeline FFT2 (int nWay)
{
        add (new FFTReorder (nWay));
        int n = 2;
        while (n <= nWay)
        {
            add (new CombineDFT (n));
            n = n * 2;
        }
    
}

/*

public class FFT2 extends StreamIt
{
    public static void main(String[] args)
    {
        new FFT2().run(args);
    }
    public void init()
    {
        add(new OneSource());
        add(new FFTKernel2(16));
        add(new FloatPrinter());
    }
}


*/








