void->void pipeline FFT {
    add OneSource();
    add FFTKernel(16);
    add FloatPrinter();
}

float->float pipeline FFTKernel (int N) {
    add splitjoin {
	split roundrobin(N/2, N/2);
	for (int i=0; i<2; i++) {
	    add splitjoin {
		split roundrobin();
		add Identity<float>();
		add Identity<float>();
		join roundrobin(N/4, N/4);
	    };
	}
	join roundrobin();
    };
    for (int i=2; i<N; i*=2) {
	add Butterfly(i, N);
    }
}

float->float pipeline Butterfly (int N, int W) {
    add splitjoin {
	split roundrobin(N, N);
	add Multiply();
	add Identity<float>();
	join roundrobin();
    };
    add splitjoin {
	split duplicate;
	add Subtract();
	add Add();
	join roundrobin(N, N);
    };
}

void->float filter OneSource {
    work push 1 {
	push(1);
    }
}

float->float filter Multiply {
    // just multiplying by 2 for now instead of calculating weights
    work push 1 pop 1 {
	push(2 * pop());
    }
}

float->float filter Add {
    work push 1 pop 2 {
	push(peek(0) + peek(1));
	pop();
	pop();
    }
}

float->float filter Subtract {
    work push 1 pop 2 {
	push(peek(0) - peek(1));
	pop();
	pop();
    }
}

float->void filter FloatPrinter {
    work pop 1 {
	print(pop());
    }
}


