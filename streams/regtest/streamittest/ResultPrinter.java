package streamittest;

import java.io.*;
import java.util.*;

/**
 * All messages (informational and error) that are generated by the
 * regression tests are passed to this class.
 **/

public class ResultPrinter {
    /** to turn on verbose output **/
    static final boolean VERBOSE         = false;
    static final String ERROR_FILE       = "regtest_errors.txt";
    static final String RESULTS_FILE     = "regtest_results.txt";
    static final String SUCCESS_FILE      = "regtest_success.txt";
 
    static FileWriter errorStream    = null;
    static FileWriter resultStream   = null;
    static FileWriter successStream  = null;

    /**
     * Prints the filename of the program that is being tested,
     * and prints which options were used to compile it.
     **/
    public static void printRawHeader(String filename, String options) {
	printRaw((new Date()).toString() + ":" + 
		 filename + "(" + options + ")\n");
    }				      
    /**
     * Prints stuff to the raw results file.
     **/
    public static void printRaw(String message) {
	// make the filewriter if necessary
	if (resultStream == null) {
	    MakeFileWriters();
	}
	
	try {
	    // write to the output file
	    resultStream.write(message);
	    // flush
	    resultStream.flush();
	} catch (Exception e) {
	    System.out.println("Error printing to the result file");
	    e.printStackTrace();
	    throw new RuntimeException();
	}
	if (VERBOSE) {
	    System.out.println(message);
	}
	
    }

    /**
     * Print an informational message
     **/
    public static void printInfo(String message) {
	if (VERBOSE) {
	    System.out.println(message);
	}
    }

    /**
     * Print an error message.
     **/
    public static void printError(String message) {
	// make the filewriter if necessary
	if (errorStream == null) {
	    MakeFileWriters();
	}
	try {
	    // write to the output file
	    errorStream.write(message + "\n");
	} catch (Exception e) {
	    System.out.println("Error printing to the error output");
	    e.printStackTrace();
	    throw new RuntimeException();
	}
	if (VERBOSE) {
	    System.out.println(message);
	}
    }

    /**
     * Print a success message (so that we can also report on
     * how many tests passed as opposed to how many failed.
     **/
    public static void printSuccess(String message) {
	// make the filewriter if necessary
	if (successStream == null) {
	    MakeFileWriters();
	}
	try {
	    // write to the output file
	    successStream.write(message + "\n");
	    successStream.flush();
	} catch (Exception e) {
	    System.out.println("Error printing to the success output");
	    e.printStackTrace();
	    throw new RuntimeException();
	}
	if (VERBOSE) {
	    System.out.println(message);
	}
    }
	

    /**
     * Create a filewriter to write error messages to.
     **/
    public static void MakeFileWriters() {
	try {
	    // create the file writer for the error messages
	    errorStream   = new FileWriter(ERROR_FILE);
	    // create the file writer for the results file in append mode
	    resultStream  = new FileWriter(RESULTS_FILE, true);
	    // create the file writer for the results file
	    successStream = new FileWriter(SUCCESS_FILE);
	} catch (Exception e) {
	    System.out.println("Error -- failed to create FileWriter:" + e.getMessage());
	    e.printStackTrace();
	}
    }	

    /**
     * flushes any output to disk.
     **/
    public static void flushFileWriter() {
	try {
	    if (errorStream != null) {
		// force disk flush
		errorStream.flush();
	    }
	    if (resultStream != null) {
		// force disk flush
		resultStream.flush();
	    }
	    if (successStream != null) {
		// force disk flush
		successStream.flush();
	    }
	} catch (Exception e) {
	    System.out.println("Error -- failed to flush filewriter:" + e.getMessage());
	    e.printStackTrace();
	}
    }

}
	
