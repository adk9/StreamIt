package streamittest;

import java.io.*;
import java.util.*;

/**
 * All messages (informational and error) that are generated by the
 * regression tests are passed to this class.
 **/

public class ResultPrinter {
    /** to turn on verbose output **/
    static final boolean VERBOSE         = false;
    static final String ERROR_FILE       = "regtest_errors.txt";
    static final String RESULTS_FILE     = "regtest_results.txt";
 
    static FileWriter errorStream   = null;
    static FileWriter resultStream  = null;

    /**
     * Prints the filename of the program that is being tested,
     * and prints which options were used to compile it.
     **/
    public static void printRawHeader(String filename, String options) {
	printRaw((new Date()).toString() + ":" + 
		 filename + "(" + options + ")\n");
    }				      
    /**
     * Prints the results of running raw_compare.pl on raw output
     * to a results file. Specifically, it prints the last output line
     * compared against, and the pc that generated that line.
     **/
    public static void printRawResults(String rawResults) {
	// parse the result string -- it is two numbers separated
	// by a space. The first number is the final cycle count of
	// when a result was produced. The second is the last line of the
	// expected output that was compared (to make sure that things don't
	// go awry -- this should be around 1000).
	
	StringTokenizer st = new StringTokenizer(rawResults, " "); // split on space
	String programCycles  = st.nextToken();
	String comparisonLine = st.nextToken();

	int cycles = Integer.parseInt(programCycles, 16);

	// assemble the message that we are going to be putting into
	// the results file
	String message = (programCycles + " " +
			  cycles + " " +
			  comparisonLine);

	printRaw(message);
    }

    /**
     * Prints stuff to the raw results file.
     **/
    private static void printRaw(String message) {
	// make the filewriter if necessary
	if (resultStream == null) {
	    MakeFileWriters();
	}
	
	try {
	    // write to the output file
	    resultStream.write(message);
	    // flush
	    resultStream.flush();
	} catch (Exception e) {
	    System.out.println("Error printing to the result file");
	    e.printStackTrace();
	    throw new RuntimeException();
	}
	if (VERBOSE) {
	    System.out.println(message);
	}
	
    }

    /**
     * Print an informational message
     **/
    public static void printInfo(String message) {
	if (VERBOSE) {
	    System.out.println(message);
	}
    }

    /**
     * Print an error message.
     **/
    public static void printError(String message) {
	// make the filewriter if necessary
	if (errorStream == null) {
	    MakeFileWriters();
	}
	try {
	    // write to the output file
	    errorStream.write(message + "\n");
	} catch (Exception e) {
	    System.out.println("Error printing to the error output");
	    e.printStackTrace();
	    throw new RuntimeException();
	}
	if (VERBOSE) {
	    System.out.println(message);
	}
    }

    /**
     * Create a filewriter to write error messages to.
     **/
    public static void MakeFileWriters() {
	try {
	    // create the file writer for the error messages
	    errorStream =   new FileWriter(ERROR_FILE);
	    // create the file writer for the results file in append mode
	    resultStream = new FileWriter(RESULTS_FILE, true);
	} catch (Exception e) {
	    System.out.println("Error -- failed to create FileWriter for regression test output");
	    e.printStackTrace();
	}
    }	

    /**
     * flushes any output to disk.
     **/
    public static void flushFileWriter() {
	try {
	    if (errorStream != null) {
		// force disk flush
		errorStream.flush();
	    }
	    if (resultStream != null) {
		// force disk flush
		resultStream.flush();
	    }
	} catch (Exception e) {
	    System.out.println("Error -- failed to flush filewriter");
	    e.printStackTrace();
	}
    }

}
	
