#!/usr/bin/perl -w
#
# knit: StreamIt compiler wrapper
# David Maze <dmaze@cag.lcs.mit.edu>
# $Id: knit,v 1.12 2002-11-15 16:05:01 dmaze Exp $
#

use strict;
use vars qw(%opts);

use Getopt::Long;
Getopt::Long::Configure("bundling", "no_ignore_case");

get_options() or die "Error parsing options";
if ($opts{help})
  {
    usage(\*STDOUT);
    exit(0);
  }
my $fns = \@ARGV;
$fns = new_to_old($fns) unless $opts{java};
$fns = old_to_c($fns);
c_to_out($fns, $opts{output}) unless $opts{raw};
exit(0);

sub usage
  {
    my ($fh) = @_;
    print $fh <<'EOT';
knit: StreamIt compiler wrapper

Usage: knit [options] file.str ...
	
Options:
  --help              Show this screen
  --java              Input file is "old" syntax
  --output filename   Write a binary to filename
  --raw n             Compile for RAW, with an n-by-n grid
  --verbose           Print commands as they are executed

Options available for all backends:
  --constprop, -c     Turns on StreamIt Field Prop
  --frequencyreplacement (0|1)
                      Convert FIR filters to frequency; 1 is efficient
  --fusion, -f        Perform filter fusion
  --linearanalysis    Perform linear analysis
  --linearreplacement Perform linear transformations based on analysis
  --poptopeek, -P     Convert all pop expressions into peeks
  --simplesjfusion    Revert to the old, simple SplitJoin fusion algorithm
  --sync, -k          Turn on sync removal
  --targetfftsize n   Target number of outputs for frequency replacement
  --unroll, -u        StreamIt Unroll
  --viram, -V         Compile for VIRAM, a vector uniprocessor

Options specific to RAW backend:
  --dppartition, -y   Use the dynamic programming partitioner
  --ilppartition      Use the integer linear programming partitioner
  --noanneal, -N      Do not run simulated annealing for layout
  --partition, -a     Automatically partition stream graph
  --ptraccess, -Q     Access buffers through a pointer
  --ratematch, -x     Turn on rate matching
  --removeglobals, -G Inline all functions and turn globals into locals
  --sketchycodegen    Avoid volatile assembly
EOT
}

sub get_options
  {
    $opts{home} = $ENV{STREAMIT_HOME};
    $opts{output} = "a.out";
    GetOptions(\%opts,
	       "help",
	       "java!",
	       "old-converter",
	       "output|o=s",
	       "raw|r=i",
	       "verbose|v",
	       "constprop|c",
	       "dppartition|y",
	       "frequencyreplacement|F=i",
	       "fusion|f",
	       "ilppartition|A",
	       "linearanalysis|i",
	       "linearreplacement|I",
	       "noanneal|N",
	       "partition|a",
	       "poptopeek|P",
	       "ptraccess|Q",
	       "ratematch|x",
	       "removeglobals|G",
	       "simplesjfusion|S",
	       "sketchycodegen|z",
	       "sync|k",
	       "targetfftsize|t=i",
	       "unroll|u=i",
	       "viram|V");
  }

sub call
  {
    my ($cmd) = @_;
    print "$cmd\n" if $opts{verbose};
    return system($cmd);
  }

sub change_extension
  {
    my ($old, $from, $to) = @_;
    my $fn = $old;
    $fn =~ s/.$from$//;
    $fn .= ".$to";
    return $fn;
  }

sub new_to_old
  {
    my ($fns) = @_;
    my @out = ();
    foreach my $str (@$fns)
      {
	my $java = change_extension($str, "str", "java");
	if ($opts{'old-converter'})
	  {
	    call("java streamit.frontend.ToJava < $str > $java");
	  }
	else
	  {
	    call("java streamit.frontend.ToJava --full $str --output $java");
	  }
	push @out, $java;
      }
    return \@out;
  }

sub old_to_c
  {
    my ($fns) = @_;
    my @out = ();
    my $kjcopts = get_kjc_opts();
    foreach my $java (@$fns)
      {
	if (!$opts{raw})
	  {
	    my $c = change_extension($java, "java", "c");
	    call("java -Xmx512M at.dms.kjc.Main -s $kjcopts $java > $c");
	    push @out, $c;
	  }
	else
	  {
	    call("java -Xmx512M at.dms.kjc.Main -s $kjcopts $java");
	  }
      }
    return \@out;
  }

sub c_to_out
  {
    my ($fns, $target) = @_;
    my $sh = $opts{home};
    call("gcc -g -o$target -I$sh/library/c " . join(' ', @$fns) .
	 " -L$sh/library/c -lstreamit -lm");
  }

sub get_kjc_opts
  {
    my $kjcopts = "";
    $opts{raw} && ($kjcopts .= " -raw " . $opts{raw});
    $opts{constprop} && ($kjcopts .= " -c");
    $opts{dppartition} && ($kjcopts .= " -y");
    $opts{frequencyreplacement} &&
      ($kjcopts .= " -F" . $opts{frequencyreplacement});
    $opts{fusion} && ($kjcopts .= " -o");
    $opts{ilppartition} && ($kjcopts .= " -A");
    $opts{linearanalysis} && ($kjcopts .= " -i");
    $opts{linearreplacement} && ($kjcopts .= " -I");
    $opts{noanneal} && ($kjcopts .= " -N");
    $opts{partition} && ($kjcopts .= " -a");
    $opts{poptopeek} && ($kjcopts .= " -P");
    $opts{ptraccess} && ($kjcopts .= " -Q");
    $opts{ratematch} && ($kjcopts .= " -x");
    $opts{removeglobals} && ($kjcopts .= " -G");
    $opts{simplesjfusion} && ($kjcopts .= " -S");
    $opts{sketchycodegen} && ($kjcopts .= " -z");
    $opts{sync} && ($kjcopts .= " -k");
    $opts{targetfftsize} && ($kjcopts .= " -t" . $opts{targetfftsize});
    $opts{unroll} && ($kjcopts .= " -u " . $opts{unroll});
    $opts{viram} && ($kjcopts .= " -V");
    return $kjcopts;
}
