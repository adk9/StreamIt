------------------------------------------------------------------------

- emphasize in title or abstract that this is for static rates

- make it more clear in words what the semantics are of message
sending, etc.

- add to intro:  timing emphasis

- In Figure 7 don't put all the code of TrunkedRadio, also put parts of code
from Booster and Check Quality to show message delivery. (Copy the class,
eliminate extraneous stuff and put dots)

- IN 3.3.2 having a messaging system reduces the number of channels since only
high bandwidth comm. need a channel, making most programs easier to fit into
a structured streaming model.

- 3.4.1 Justify reinitializatoin by need to change a part of the stream graph.

- Adhoc reinitialization can easily loose data or deadlock the system.

- Need to note somewhere that sending a message does not affect the info
wavefront. I.e. can go "back to the future" using messages.

- Just before 4.1.1 The formalism is not only used for define messaging and
latency but also to prove program correctness (deadlock etc.)

- 4.1.1 Where is min?

- Figure 10 has J and S not FJ and FS is that consistent??

- 4.2.3 We can do something cool on for scheduling, we can bound the
total number of buffer space!  Find the number of items that must be
on a tape, sum them up, and say it has to be less than MAXBUFFERSIZE

- We should say something in intro/abstract about how easy for us to
prove/show deadlock freedom etc.

- Section 6 needs a description about the TrunkedRadio (how about the
description I e-mailed to you yesterday?)

------------------------------------------------------------------------

- write appendix

* define latency for things other than filters.  same with messages!
	- will need concept of first/last filters in a stream, which
		could get complicated
	- ability to send to other targets?

- make an example that makes use of portals for portal's sake
	1. library notion (unknown receiver / sender)
	2. broadcast messaging
	3. send up and down the stream

	-> like an example w/ completely messaging stuff
	- very simple & artificial

	- also have re-initialization an draining in some example?

todo in windows
---------------

- expand the messaging diagram into a nice picture with the source,
destination, portal, and connecting code.

todo later this afternoon
-------------------------

- should this be manuscript format instead of two-column?

- add the Tech Report #

questions for saman
-------------------

* order of evaluation of input.pop() in statements that contain more
than 1?  I modified your function to input on different lines.  If we
can have clean semantics, then let's change it back... but I think
this is a mess we don't want to get into.  In fact, let's disallow
it.  (Although we could detect commutativity, maybe...)

* checkFreqHop had a messed up for loop, right?  changed to 1-5, ==2, ==4

* should checkQuality be in the freq domain?  We really want a booster
if the frequency spectrum is even?  But we said that we expect low
values at the hop positions for the hopping... maybe they shouldn't
output anything at the hop positions?

* I'm going to let the init function push and pop, ok?  We still have
to give semantics.

-> note: I'm using semantics of add so that it returns what it adds.
this leads to a nicer syntax.

changes we decided against making?
----------------------------------

- put a splitJoin at the end of the TrunkedRadio example, since it
makes more sense that way.

- some name other than TIME interval for the message sending!

- reorganize the derivations of min/max so that stuff leaving the
split/join and stuff entering the split/join is together?  then the
similar equaionts are placed next to each other.

- number all equations?

future things to think about
----------------------------

* realtime constraints.  can we say a filter fires once per time interval?

* work out the semantics of the w-message sending (disjoint pieces)

* letting init codes cause an offset (do push() on output)

* exact tape-based semantics of reinitializatin

* semantic restrictions of sending a message within a message handler.
Need to start counting work functions in a different way.

- any notion of exceptions?  error handling?

- any concept of filters ignoring items?  would affect wavefront (a
select filter, for example.)

- I still vote for a reordering filter that lets you reorder chunks
without a complicated round-robin with identitity functions.

