things to do with figures:
--------------------------

- shrink the figure that labels stream constructs.

- shrink the tape figure, if you want to see it back in the paper

things to do with paper:
------------------------

* add much more motivation for section 3 -- why you want min function,
look at optimizations first, and then come back to prove them, etc.

- inlining as textual substitution instead of optimization

- i2 -> w2

- not clear why calling init function instead of constructor.  either
bring back footnote or obscure what's going on.

- comma instead of arrow in min function

-> min function stuff would be more clear if it was motivated with the
use of the min function

-> bring out that the min function 

---

-> message semantics not defining stuff

- note that push_A and pop_A have different tapes

- need to show that W has signature StreamIt -> work, not the
application of it to the work function

- suppose w_1 in the canonical form above before showing W

- need to convert arrows to lambda's in definition

- make clear that PEEK comes from work above

- make clear that we're doing an example on a typical work function

- do \mbox{ } around words in math.

---

- define the composition operator the first time you introduce
it--otherwise it's not clear what the circle means

* look for the max function

------

- change the "denotational semantics" heading so as not to attract
	denotational semanticists

- remove most of the message-constrained scheduling in favor of something
	that's honest but short.

- mention limitiation of first-class streams?

- include picture of the equalizer in the intro?

- be consistent about RoundRobin vs. Weighted Round Robin

- be consistent about SplitJoin / split-join / split join / splitjoin,
plus capitalization of all stream constructs.

- modify the tape-labeling diagram to have $n$ streams in a parallel split-join

- get correct typesetting for natural numbers N

- add note that the message delivery constraints sometimes specify a
minimum buffer size, sometimes specify a maximum buffer size?

- define a max function in the case of the downstream message sending,
just for the sake of making the explanation clearer (and defining the
max function, so that other people can use it in other papers, and
think about the concept even.)

- abstract away the function composing streams around a path of a
splitjoin?  then could use it again when talking about the
denotational semantics.

things to figure out / solve:
-----------------------------

*** Someone please check the equations.

*** Can we figure out the denotational semantics for a feedback loop?

*** Can we show that fusion preserves the min function across its
inputs?

* Add the meaning of the whole program to the denotational semantics.

- Add a figure for the feedback loop transformation?  The fusion
transformation?

- Eliminate round robin / weighted round robin (watchout for WeightedRR
in model.tex, too) in favor of just "round robin" that is assumed to
have some weights.

- Introduce comma notation for O1_S => O_1,S, etc.

- Improve the translation from the abstract syntax back to a work function

- Can we say anything about how message latencies should be modified
following a fusion transformation?

- I think the min function is violated when the tapes are empty.
Should probably look at this and see if there's a way to fix it.

- Also, message constraints are violated when things are empty, since
if you require a certain amount of buffering between two filters, then
there won't be that data until initialization time.  hmm.

- Add this reference to VSIPL, the C comparison code for the PCA demo:

David Schwartz, Randall R. Judd, William J. Harrod, and Dwight
P. Manley.  Vector, signal, and image processing library (VSIPL) 1.0
application programmer's interface.  Technical report, Georgia Tech
Research Corporation, March 200.

- relationship to lazy functional languages


